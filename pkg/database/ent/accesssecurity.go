// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/willie-lin/cloud-terminal/pkg/database/ent/accesssecurity"
)

// AccessSecurity is the model entity for the AccessSecurity schema.
type AccessSecurity struct {
	config `json:"-"`
	// ID of the ent.
	ID string `json:"id,omitempty"`
	// Rule holds the value of the "rule" field.
	Rule string `json:"rule,omitempty"`
	// IP holds the value of the "ip" field.
	IP string `json:"ip,omitempty"`
	// Source holds the value of the "source" field.
	Source string `json:"source,omitempty"`
	// Priority holds the value of the "priority" field.
	Priority int64 `json:"priority,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the AccessSecurityQuery when eager-loading is set.
	Edges AccessSecurityEdges `json:"edges"`
}

// AccessSecurityEdges holds the relations/edges for other nodes in the graph.
type AccessSecurityEdges struct {
	// Assets holds the value of the assets edge.
	Assets []*Asset `json:"assets,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// AssetsOrErr returns the Assets value or an error if the edge
// was not loaded in eager-loading.
func (e AccessSecurityEdges) AssetsOrErr() ([]*Asset, error) {
	if e.loadedTypes[0] {
		return e.Assets, nil
	}
	return nil, &NotLoadedError{edge: "assets"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*AccessSecurity) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case accesssecurity.FieldPriority:
			values[i] = new(sql.NullInt64)
		case accesssecurity.FieldID, accesssecurity.FieldRule, accesssecurity.FieldIP, accesssecurity.FieldSource:
			values[i] = new(sql.NullString)
		case accesssecurity.FieldCreatedAt, accesssecurity.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		default:
			return nil, fmt.Errorf("unexpected column %q for type AccessSecurity", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the AccessSecurity fields.
func (as *AccessSecurity) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case accesssecurity.FieldID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
				as.ID = value.String
			}
		case accesssecurity.FieldRule:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field rule", values[i])
			} else if value.Valid {
				as.Rule = value.String
			}
		case accesssecurity.FieldIP:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field ip", values[i])
			} else if value.Valid {
				as.IP = value.String
			}
		case accesssecurity.FieldSource:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field source", values[i])
			} else if value.Valid {
				as.Source = value.String
			}
		case accesssecurity.FieldPriority:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field priority", values[i])
			} else if value.Valid {
				as.Priority = value.Int64
			}
		case accesssecurity.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				as.CreatedAt = value.Time
			}
		case accesssecurity.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				as.UpdatedAt = value.Time
			}
		}
	}
	return nil
}

// QueryAssets queries the "assets" edge of the AccessSecurity entity.
func (as *AccessSecurity) QueryAssets() *AssetQuery {
	return (&AccessSecurityClient{config: as.config}).QueryAssets(as)
}

// Update returns a builder for updating this AccessSecurity.
// Note that you need to call AccessSecurity.Unwrap() before calling this method if this AccessSecurity
// was returned from a transaction, and the transaction was committed or rolled back.
func (as *AccessSecurity) Update() *AccessSecurityUpdateOne {
	return (&AccessSecurityClient{config: as.config}).UpdateOne(as)
}

// Unwrap unwraps the AccessSecurity entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (as *AccessSecurity) Unwrap() *AccessSecurity {
	tx, ok := as.config.driver.(*txDriver)
	if !ok {
		panic("ent: AccessSecurity is not a transactional entity")
	}
	as.config.driver = tx.drv
	return as
}

// String implements the fmt.Stringer.
func (as *AccessSecurity) String() string {
	var builder strings.Builder
	builder.WriteString("AccessSecurity(")
	builder.WriteString(fmt.Sprintf("id=%v", as.ID))
	builder.WriteString(", rule=")
	builder.WriteString(as.Rule)
	builder.WriteString(", ip=")
	builder.WriteString(as.IP)
	builder.WriteString(", source=")
	builder.WriteString(as.Source)
	builder.WriteString(", priority=")
	builder.WriteString(fmt.Sprintf("%v", as.Priority))
	builder.WriteString(", created_at=")
	builder.WriteString(as.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", updated_at=")
	builder.WriteString(as.UpdatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// AccessSecurities is a parsable slice of AccessSecurity.
type AccessSecurities []*AccessSecurity

func (as AccessSecurities) config(cfg config) {
	for _i := range as {
		as[_i].config = cfg
	}
}
