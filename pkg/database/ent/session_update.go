// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"time"

	"github.com/facebook/ent/dialect/sql"
	"github.com/facebook/ent/dialect/sql/sqlgraph"
	"github.com/facebook/ent/schema/field"
	"github.com/willie-lin/cloud-terminal/pkg/database/ent/predicate"
	"github.com/willie-lin/cloud-terminal/pkg/database/ent/session"
)

// SessionUpdate is the builder for updating Session entities.
type SessionUpdate struct {
	config
	hooks    []Hook
	mutation *SessionMutation
}

// Where adds a new predicate for the SessionUpdate builder.
func (su *SessionUpdate) Where(ps ...predicate.Session) *SessionUpdate {
	su.mutation.predicates = append(su.mutation.predicates, ps...)
	return su
}

// SetProtocol sets the "protocol" field.
func (su *SessionUpdate) SetProtocol(s string) *SessionUpdate {
	su.mutation.SetProtocol(s)
	return su
}

// SetIP sets the "ip" field.
func (su *SessionUpdate) SetIP(s string) *SessionUpdate {
	su.mutation.SetIP(s)
	return su
}

// SetPort sets the "port" field.
func (su *SessionUpdate) SetPort(i int) *SessionUpdate {
	su.mutation.ResetPort()
	su.mutation.SetPort(i)
	return su
}

// AddPort adds i to the "port" field.
func (su *SessionUpdate) AddPort(i int) *SessionUpdate {
	su.mutation.AddPort(i)
	return su
}

// SetConnectionId sets the "connectionId" field.
func (su *SessionUpdate) SetConnectionId(s string) *SessionUpdate {
	su.mutation.SetConnectionId(s)
	return su
}

// SetAssetId sets the "AssetId" field.
func (su *SessionUpdate) SetAssetId(s string) *SessionUpdate {
	su.mutation.SetAssetId(s)
	return su
}

// SetUsername sets the "Username" field.
func (su *SessionUpdate) SetUsername(s string) *SessionUpdate {
	su.mutation.SetUsername(s)
	return su
}

// SetPassword sets the "Password" field.
func (su *SessionUpdate) SetPassword(s string) *SessionUpdate {
	su.mutation.SetPassword(s)
	return su
}

// SetCreator sets the "Creator" field.
func (su *SessionUpdate) SetCreator(s string) *SessionUpdate {
	su.mutation.SetCreator(s)
	return su
}

// SetClientIP sets the "ClientIP" field.
func (su *SessionUpdate) SetClientIP(s string) *SessionUpdate {
	su.mutation.SetClientIP(s)
	return su
}

// SetWidth sets the "Width" field.
func (su *SessionUpdate) SetWidth(i int) *SessionUpdate {
	su.mutation.ResetWidth()
	su.mutation.SetWidth(i)
	return su
}

// AddWidth adds i to the "Width" field.
func (su *SessionUpdate) AddWidth(i int) *SessionUpdate {
	su.mutation.AddWidth(i)
	return su
}

// SetHeight sets the "Height" field.
func (su *SessionUpdate) SetHeight(i int) *SessionUpdate {
	su.mutation.ResetHeight()
	su.mutation.SetHeight(i)
	return su
}

// AddHeight adds i to the "Height" field.
func (su *SessionUpdate) AddHeight(i int) *SessionUpdate {
	su.mutation.AddHeight(i)
	return su
}

// SetStatus sets the "Status" field.
func (su *SessionUpdate) SetStatus(s string) *SessionUpdate {
	su.mutation.SetStatus(s)
	return su
}

// SetRecording sets the "Recording" field.
func (su *SessionUpdate) SetRecording(s string) *SessionUpdate {
	su.mutation.SetRecording(s)
	return su
}

// SetPrivateKey sets the "PrivateKey" field.
func (su *SessionUpdate) SetPrivateKey(s string) *SessionUpdate {
	su.mutation.SetPrivateKey(s)
	return su
}

// SetPassphrase sets the "Passphrase" field.
func (su *SessionUpdate) SetPassphrase(s string) *SessionUpdate {
	su.mutation.SetPassphrase(s)
	return su
}

// SetCode sets the "Code" field.
func (su *SessionUpdate) SetCode(i int) *SessionUpdate {
	su.mutation.ResetCode()
	su.mutation.SetCode(i)
	return su
}

// AddCode adds i to the "Code" field.
func (su *SessionUpdate) AddCode(i int) *SessionUpdate {
	su.mutation.AddCode(i)
	return su
}

// SetMessage sets the "Message" field.
func (su *SessionUpdate) SetMessage(s string) *SessionUpdate {
	su.mutation.SetMessage(s)
	return su
}

// SetConnectedTime sets the "ConnectedTime" field.
func (su *SessionUpdate) SetConnectedTime(t time.Time) *SessionUpdate {
	su.mutation.SetConnectedTime(t)
	return su
}

// SetDisconnectedTime sets the "DisconnectedTime" field.
func (su *SessionUpdate) SetDisconnectedTime(t time.Time) *SessionUpdate {
	su.mutation.SetDisconnectedTime(t)
	return su
}

// Mutation returns the SessionMutation object of the builder.
func (su *SessionUpdate) Mutation() *SessionMutation {
	return su.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (su *SessionUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(su.hooks) == 0 {
		affected, err = su.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*SessionMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			su.mutation = mutation
			affected, err = su.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(su.hooks) - 1; i >= 0; i-- {
			mut = su.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, su.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (su *SessionUpdate) SaveX(ctx context.Context) int {
	affected, err := su.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (su *SessionUpdate) Exec(ctx context.Context) error {
	_, err := su.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (su *SessionUpdate) ExecX(ctx context.Context) {
	if err := su.Exec(ctx); err != nil {
		panic(err)
	}
}

func (su *SessionUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   session.Table,
			Columns: session.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: session.FieldID,
			},
		},
	}
	if ps := su.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := su.mutation.Protocol(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: session.FieldProtocol,
		})
	}
	if value, ok := su.mutation.IP(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: session.FieldIP,
		})
	}
	if value, ok := su.mutation.Port(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: session.FieldPort,
		})
	}
	if value, ok := su.mutation.AddedPort(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: session.FieldPort,
		})
	}
	if value, ok := su.mutation.ConnectionId(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: session.FieldConnectionId,
		})
	}
	if value, ok := su.mutation.AssetId(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: session.FieldAssetId,
		})
	}
	if value, ok := su.mutation.Username(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: session.FieldUsername,
		})
	}
	if value, ok := su.mutation.Password(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: session.FieldPassword,
		})
	}
	if value, ok := su.mutation.Creator(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: session.FieldCreator,
		})
	}
	if value, ok := su.mutation.ClientIP(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: session.FieldClientIP,
		})
	}
	if value, ok := su.mutation.Width(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: session.FieldWidth,
		})
	}
	if value, ok := su.mutation.AddedWidth(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: session.FieldWidth,
		})
	}
	if value, ok := su.mutation.Height(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: session.FieldHeight,
		})
	}
	if value, ok := su.mutation.AddedHeight(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: session.FieldHeight,
		})
	}
	if value, ok := su.mutation.Status(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: session.FieldStatus,
		})
	}
	if value, ok := su.mutation.Recording(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: session.FieldRecording,
		})
	}
	if value, ok := su.mutation.PrivateKey(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: session.FieldPrivateKey,
		})
	}
	if value, ok := su.mutation.Passphrase(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: session.FieldPassphrase,
		})
	}
	if value, ok := su.mutation.Code(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: session.FieldCode,
		})
	}
	if value, ok := su.mutation.AddedCode(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: session.FieldCode,
		})
	}
	if value, ok := su.mutation.Message(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: session.FieldMessage,
		})
	}
	if value, ok := su.mutation.ConnectedTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: session.FieldConnectedTime,
		})
	}
	if value, ok := su.mutation.DisconnectedTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: session.FieldDisconnectedTime,
		})
	}
	if n, err = sqlgraph.UpdateNodes(ctx, su.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{session.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// SessionUpdateOne is the builder for updating a single Session entity.
type SessionUpdateOne struct {
	config
	hooks    []Hook
	mutation *SessionMutation
}

// SetProtocol sets the "protocol" field.
func (suo *SessionUpdateOne) SetProtocol(s string) *SessionUpdateOne {
	suo.mutation.SetProtocol(s)
	return suo
}

// SetIP sets the "ip" field.
func (suo *SessionUpdateOne) SetIP(s string) *SessionUpdateOne {
	suo.mutation.SetIP(s)
	return suo
}

// SetPort sets the "port" field.
func (suo *SessionUpdateOne) SetPort(i int) *SessionUpdateOne {
	suo.mutation.ResetPort()
	suo.mutation.SetPort(i)
	return suo
}

// AddPort adds i to the "port" field.
func (suo *SessionUpdateOne) AddPort(i int) *SessionUpdateOne {
	suo.mutation.AddPort(i)
	return suo
}

// SetConnectionId sets the "connectionId" field.
func (suo *SessionUpdateOne) SetConnectionId(s string) *SessionUpdateOne {
	suo.mutation.SetConnectionId(s)
	return suo
}

// SetAssetId sets the "AssetId" field.
func (suo *SessionUpdateOne) SetAssetId(s string) *SessionUpdateOne {
	suo.mutation.SetAssetId(s)
	return suo
}

// SetUsername sets the "Username" field.
func (suo *SessionUpdateOne) SetUsername(s string) *SessionUpdateOne {
	suo.mutation.SetUsername(s)
	return suo
}

// SetPassword sets the "Password" field.
func (suo *SessionUpdateOne) SetPassword(s string) *SessionUpdateOne {
	suo.mutation.SetPassword(s)
	return suo
}

// SetCreator sets the "Creator" field.
func (suo *SessionUpdateOne) SetCreator(s string) *SessionUpdateOne {
	suo.mutation.SetCreator(s)
	return suo
}

// SetClientIP sets the "ClientIP" field.
func (suo *SessionUpdateOne) SetClientIP(s string) *SessionUpdateOne {
	suo.mutation.SetClientIP(s)
	return suo
}

// SetWidth sets the "Width" field.
func (suo *SessionUpdateOne) SetWidth(i int) *SessionUpdateOne {
	suo.mutation.ResetWidth()
	suo.mutation.SetWidth(i)
	return suo
}

// AddWidth adds i to the "Width" field.
func (suo *SessionUpdateOne) AddWidth(i int) *SessionUpdateOne {
	suo.mutation.AddWidth(i)
	return suo
}

// SetHeight sets the "Height" field.
func (suo *SessionUpdateOne) SetHeight(i int) *SessionUpdateOne {
	suo.mutation.ResetHeight()
	suo.mutation.SetHeight(i)
	return suo
}

// AddHeight adds i to the "Height" field.
func (suo *SessionUpdateOne) AddHeight(i int) *SessionUpdateOne {
	suo.mutation.AddHeight(i)
	return suo
}

// SetStatus sets the "Status" field.
func (suo *SessionUpdateOne) SetStatus(s string) *SessionUpdateOne {
	suo.mutation.SetStatus(s)
	return suo
}

// SetRecording sets the "Recording" field.
func (suo *SessionUpdateOne) SetRecording(s string) *SessionUpdateOne {
	suo.mutation.SetRecording(s)
	return suo
}

// SetPrivateKey sets the "PrivateKey" field.
func (suo *SessionUpdateOne) SetPrivateKey(s string) *SessionUpdateOne {
	suo.mutation.SetPrivateKey(s)
	return suo
}

// SetPassphrase sets the "Passphrase" field.
func (suo *SessionUpdateOne) SetPassphrase(s string) *SessionUpdateOne {
	suo.mutation.SetPassphrase(s)
	return suo
}

// SetCode sets the "Code" field.
func (suo *SessionUpdateOne) SetCode(i int) *SessionUpdateOne {
	suo.mutation.ResetCode()
	suo.mutation.SetCode(i)
	return suo
}

// AddCode adds i to the "Code" field.
func (suo *SessionUpdateOne) AddCode(i int) *SessionUpdateOne {
	suo.mutation.AddCode(i)
	return suo
}

// SetMessage sets the "Message" field.
func (suo *SessionUpdateOne) SetMessage(s string) *SessionUpdateOne {
	suo.mutation.SetMessage(s)
	return suo
}

// SetConnectedTime sets the "ConnectedTime" field.
func (suo *SessionUpdateOne) SetConnectedTime(t time.Time) *SessionUpdateOne {
	suo.mutation.SetConnectedTime(t)
	return suo
}

// SetDisconnectedTime sets the "DisconnectedTime" field.
func (suo *SessionUpdateOne) SetDisconnectedTime(t time.Time) *SessionUpdateOne {
	suo.mutation.SetDisconnectedTime(t)
	return suo
}

// Mutation returns the SessionMutation object of the builder.
func (suo *SessionUpdateOne) Mutation() *SessionMutation {
	return suo.mutation
}

// Save executes the query and returns the updated Session entity.
func (suo *SessionUpdateOne) Save(ctx context.Context) (*Session, error) {
	var (
		err  error
		node *Session
	)
	if len(suo.hooks) == 0 {
		node, err = suo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*SessionMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			suo.mutation = mutation
			node, err = suo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(suo.hooks) - 1; i >= 0; i-- {
			mut = suo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, suo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (suo *SessionUpdateOne) SaveX(ctx context.Context) *Session {
	node, err := suo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (suo *SessionUpdateOne) Exec(ctx context.Context) error {
	_, err := suo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (suo *SessionUpdateOne) ExecX(ctx context.Context) {
	if err := suo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (suo *SessionUpdateOne) sqlSave(ctx context.Context) (_node *Session, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   session.Table,
			Columns: session.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: session.FieldID,
			},
		},
	}
	id, ok := suo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing Session.ID for update")}
	}
	_spec.Node.ID.Value = id
	if value, ok := suo.mutation.Protocol(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: session.FieldProtocol,
		})
	}
	if value, ok := suo.mutation.IP(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: session.FieldIP,
		})
	}
	if value, ok := suo.mutation.Port(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: session.FieldPort,
		})
	}
	if value, ok := suo.mutation.AddedPort(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: session.FieldPort,
		})
	}
	if value, ok := suo.mutation.ConnectionId(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: session.FieldConnectionId,
		})
	}
	if value, ok := suo.mutation.AssetId(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: session.FieldAssetId,
		})
	}
	if value, ok := suo.mutation.Username(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: session.FieldUsername,
		})
	}
	if value, ok := suo.mutation.Password(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: session.FieldPassword,
		})
	}
	if value, ok := suo.mutation.Creator(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: session.FieldCreator,
		})
	}
	if value, ok := suo.mutation.ClientIP(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: session.FieldClientIP,
		})
	}
	if value, ok := suo.mutation.Width(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: session.FieldWidth,
		})
	}
	if value, ok := suo.mutation.AddedWidth(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: session.FieldWidth,
		})
	}
	if value, ok := suo.mutation.Height(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: session.FieldHeight,
		})
	}
	if value, ok := suo.mutation.AddedHeight(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: session.FieldHeight,
		})
	}
	if value, ok := suo.mutation.Status(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: session.FieldStatus,
		})
	}
	if value, ok := suo.mutation.Recording(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: session.FieldRecording,
		})
	}
	if value, ok := suo.mutation.PrivateKey(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: session.FieldPrivateKey,
		})
	}
	if value, ok := suo.mutation.Passphrase(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: session.FieldPassphrase,
		})
	}
	if value, ok := suo.mutation.Code(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: session.FieldCode,
		})
	}
	if value, ok := suo.mutation.AddedCode(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: session.FieldCode,
		})
	}
	if value, ok := suo.mutation.Message(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: session.FieldMessage,
		})
	}
	if value, ok := suo.mutation.ConnectedTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: session.FieldConnectedTime,
		})
	}
	if value, ok := suo.mutation.DisconnectedTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: session.FieldDisconnectedTime,
		})
	}
	_node = &Session{config: suo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, suo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{session.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return _node, nil
}
