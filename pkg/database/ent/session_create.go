// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"github.com/facebook/ent/dialect/sql/sqlgraph"
	"github.com/facebook/ent/schema/field"
	"github.com/willie-lin/cloud-terminal/pkg/database/ent/asset"
	"github.com/willie-lin/cloud-terminal/pkg/database/ent/session"
)

// SessionCreate is the builder for creating a Session entity.
type SessionCreate struct {
	config
	mutation *SessionMutation
	hooks    []Hook
}

// SetProtocol sets the "protocol" field.
func (sc *SessionCreate) SetProtocol(s string) *SessionCreate {
	sc.mutation.SetProtocol(s)
	return sc
}

// SetIP sets the "ip" field.
func (sc *SessionCreate) SetIP(s string) *SessionCreate {
	sc.mutation.SetIP(s)
	return sc
}

// SetPort sets the "port" field.
func (sc *SessionCreate) SetPort(i int) *SessionCreate {
	sc.mutation.SetPort(i)
	return sc
}

// SetConnectionId sets the "connectionId" field.
func (sc *SessionCreate) SetConnectionId(s string) *SessionCreate {
	sc.mutation.SetConnectionId(s)
	return sc
}

// SetAssetId sets the "assetId" field.
func (sc *SessionCreate) SetAssetId(s string) *SessionCreate {
	sc.mutation.SetAssetId(s)
	return sc
}

// SetUsername sets the "username" field.
func (sc *SessionCreate) SetUsername(s string) *SessionCreate {
	sc.mutation.SetUsername(s)
	return sc
}

// SetPassword sets the "password" field.
func (sc *SessionCreate) SetPassword(s string) *SessionCreate {
	sc.mutation.SetPassword(s)
	return sc
}

// SetCreator sets the "creator" field.
func (sc *SessionCreate) SetCreator(s string) *SessionCreate {
	sc.mutation.SetCreator(s)
	return sc
}

// SetClientIP sets the "clientIP" field.
func (sc *SessionCreate) SetClientIP(s string) *SessionCreate {
	sc.mutation.SetClientIP(s)
	return sc
}

// SetWidth sets the "width" field.
func (sc *SessionCreate) SetWidth(i int) *SessionCreate {
	sc.mutation.SetWidth(i)
	return sc
}

// SetHeight sets the "height" field.
func (sc *SessionCreate) SetHeight(i int) *SessionCreate {
	sc.mutation.SetHeight(i)
	return sc
}

// SetStatus sets the "status" field.
func (sc *SessionCreate) SetStatus(s string) *SessionCreate {
	sc.mutation.SetStatus(s)
	return sc
}

// SetRecording sets the "recording" field.
func (sc *SessionCreate) SetRecording(s string) *SessionCreate {
	sc.mutation.SetRecording(s)
	return sc
}

// SetPrivateKey sets the "privateKey" field.
func (sc *SessionCreate) SetPrivateKey(s string) *SessionCreate {
	sc.mutation.SetPrivateKey(s)
	return sc
}

// SetPassphrase sets the "passphrase" field.
func (sc *SessionCreate) SetPassphrase(s string) *SessionCreate {
	sc.mutation.SetPassphrase(s)
	return sc
}

// SetCode sets the "code" field.
func (sc *SessionCreate) SetCode(i int) *SessionCreate {
	sc.mutation.SetCode(i)
	return sc
}

// SetMessage sets the "message" field.
func (sc *SessionCreate) SetMessage(s string) *SessionCreate {
	sc.mutation.SetMessage(s)
	return sc
}

// SetConnectedTime sets the "connectedTime" field.
func (sc *SessionCreate) SetConnectedTime(t time.Time) *SessionCreate {
	sc.mutation.SetConnectedTime(t)
	return sc
}

// SetNillableConnectedTime sets the "connectedTime" field if the given value is not nil.
func (sc *SessionCreate) SetNillableConnectedTime(t *time.Time) *SessionCreate {
	if t != nil {
		sc.SetConnectedTime(*t)
	}
	return sc
}

// SetDisconnectedTime sets the "disconnectedTime" field.
func (sc *SessionCreate) SetDisconnectedTime(t time.Time) *SessionCreate {
	sc.mutation.SetDisconnectedTime(t)
	return sc
}

// SetNillableDisconnectedTime sets the "disconnectedTime" field if the given value is not nil.
func (sc *SessionCreate) SetNillableDisconnectedTime(t *time.Time) *SessionCreate {
	if t != nil {
		sc.SetDisconnectedTime(*t)
	}
	return sc
}

// SetID sets the "id" field.
func (sc *SessionCreate) SetID(s string) *SessionCreate {
	sc.mutation.SetID(s)
	return sc
}

// AddAssetIDs adds the "assets" edge to the Asset entity by IDs.
func (sc *SessionCreate) AddAssetIDs(ids ...string) *SessionCreate {
	sc.mutation.AddAssetIDs(ids...)
	return sc
}

// AddAssets adds the "assets" edges to the Asset entity.
func (sc *SessionCreate) AddAssets(a ...*Asset) *SessionCreate {
	ids := make([]string, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return sc.AddAssetIDs(ids...)
}

// Mutation returns the SessionMutation object of the builder.
func (sc *SessionCreate) Mutation() *SessionMutation {
	return sc.mutation
}

// Save creates the Session in the database.
func (sc *SessionCreate) Save(ctx context.Context) (*Session, error) {
	var (
		err  error
		node *Session
	)
	sc.defaults()
	if len(sc.hooks) == 0 {
		if err = sc.check(); err != nil {
			return nil, err
		}
		node, err = sc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*SessionMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = sc.check(); err != nil {
				return nil, err
			}
			sc.mutation = mutation
			node, err = sc.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(sc.hooks) - 1; i >= 0; i-- {
			mut = sc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, sc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (sc *SessionCreate) SaveX(ctx context.Context) *Session {
	v, err := sc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// defaults sets the default values of the builder before save.
func (sc *SessionCreate) defaults() {
	if _, ok := sc.mutation.ConnectedTime(); !ok {
		v := session.DefaultConnectedTime()
		sc.mutation.SetConnectedTime(v)
	}
	if _, ok := sc.mutation.DisconnectedTime(); !ok {
		v := session.DefaultDisconnectedTime()
		sc.mutation.SetDisconnectedTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (sc *SessionCreate) check() error {
	if _, ok := sc.mutation.Protocol(); !ok {
		return &ValidationError{Name: "protocol", err: errors.New("ent: missing required field \"protocol\"")}
	}
	if _, ok := sc.mutation.IP(); !ok {
		return &ValidationError{Name: "ip", err: errors.New("ent: missing required field \"ip\"")}
	}
	if _, ok := sc.mutation.Port(); !ok {
		return &ValidationError{Name: "port", err: errors.New("ent: missing required field \"port\"")}
	}
	if _, ok := sc.mutation.ConnectionId(); !ok {
		return &ValidationError{Name: "connectionId", err: errors.New("ent: missing required field \"connectionId\"")}
	}
	if _, ok := sc.mutation.AssetId(); !ok {
		return &ValidationError{Name: "assetId", err: errors.New("ent: missing required field \"assetId\"")}
	}
	if _, ok := sc.mutation.Username(); !ok {
		return &ValidationError{Name: "username", err: errors.New("ent: missing required field \"username\"")}
	}
	if _, ok := sc.mutation.Password(); !ok {
		return &ValidationError{Name: "password", err: errors.New("ent: missing required field \"password\"")}
	}
	if _, ok := sc.mutation.Creator(); !ok {
		return &ValidationError{Name: "creator", err: errors.New("ent: missing required field \"creator\"")}
	}
	if _, ok := sc.mutation.ClientIP(); !ok {
		return &ValidationError{Name: "clientIP", err: errors.New("ent: missing required field \"clientIP\"")}
	}
	if _, ok := sc.mutation.Width(); !ok {
		return &ValidationError{Name: "width", err: errors.New("ent: missing required field \"width\"")}
	}
	if _, ok := sc.mutation.Height(); !ok {
		return &ValidationError{Name: "height", err: errors.New("ent: missing required field \"height\"")}
	}
	if _, ok := sc.mutation.Status(); !ok {
		return &ValidationError{Name: "status", err: errors.New("ent: missing required field \"status\"")}
	}
	if _, ok := sc.mutation.Recording(); !ok {
		return &ValidationError{Name: "recording", err: errors.New("ent: missing required field \"recording\"")}
	}
	if _, ok := sc.mutation.PrivateKey(); !ok {
		return &ValidationError{Name: "privateKey", err: errors.New("ent: missing required field \"privateKey\"")}
	}
	if _, ok := sc.mutation.Passphrase(); !ok {
		return &ValidationError{Name: "passphrase", err: errors.New("ent: missing required field \"passphrase\"")}
	}
	if _, ok := sc.mutation.Code(); !ok {
		return &ValidationError{Name: "code", err: errors.New("ent: missing required field \"code\"")}
	}
	if _, ok := sc.mutation.Message(); !ok {
		return &ValidationError{Name: "message", err: errors.New("ent: missing required field \"message\"")}
	}
	if _, ok := sc.mutation.ConnectedTime(); !ok {
		return &ValidationError{Name: "connectedTime", err: errors.New("ent: missing required field \"connectedTime\"")}
	}
	if _, ok := sc.mutation.DisconnectedTime(); !ok {
		return &ValidationError{Name: "disconnectedTime", err: errors.New("ent: missing required field \"disconnectedTime\"")}
	}
	return nil
}

func (sc *SessionCreate) sqlSave(ctx context.Context) (*Session, error) {
	_node, _spec := sc.createSpec()
	if err := sqlgraph.CreateNode(ctx, sc.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return _node, nil
}

func (sc *SessionCreate) createSpec() (*Session, *sqlgraph.CreateSpec) {
	var (
		_node = &Session{config: sc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: session.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: session.FieldID,
			},
		}
	)
	if id, ok := sc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := sc.mutation.Protocol(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: session.FieldProtocol,
		})
		_node.Protocol = value
	}
	if value, ok := sc.mutation.IP(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: session.FieldIP,
		})
		_node.IP = value
	}
	if value, ok := sc.mutation.Port(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: session.FieldPort,
		})
		_node.Port = value
	}
	if value, ok := sc.mutation.ConnectionId(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: session.FieldConnectionId,
		})
		_node.ConnectionId = value
	}
	if value, ok := sc.mutation.AssetId(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: session.FieldAssetId,
		})
		_node.AssetId = value
	}
	if value, ok := sc.mutation.Username(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: session.FieldUsername,
		})
		_node.Username = value
	}
	if value, ok := sc.mutation.Password(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: session.FieldPassword,
		})
		_node.Password = value
	}
	if value, ok := sc.mutation.Creator(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: session.FieldCreator,
		})
		_node.Creator = value
	}
	if value, ok := sc.mutation.ClientIP(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: session.FieldClientIP,
		})
		_node.ClientIP = value
	}
	if value, ok := sc.mutation.Width(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: session.FieldWidth,
		})
		_node.Width = value
	}
	if value, ok := sc.mutation.Height(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: session.FieldHeight,
		})
		_node.Height = value
	}
	if value, ok := sc.mutation.Status(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: session.FieldStatus,
		})
		_node.Status = value
	}
	if value, ok := sc.mutation.Recording(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: session.FieldRecording,
		})
		_node.Recording = value
	}
	if value, ok := sc.mutation.PrivateKey(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: session.FieldPrivateKey,
		})
		_node.PrivateKey = value
	}
	if value, ok := sc.mutation.Passphrase(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: session.FieldPassphrase,
		})
		_node.Passphrase = value
	}
	if value, ok := sc.mutation.Code(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: session.FieldCode,
		})
		_node.Code = value
	}
	if value, ok := sc.mutation.Message(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: session.FieldMessage,
		})
		_node.Message = value
	}
	if value, ok := sc.mutation.ConnectedTime(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: session.FieldConnectedTime,
		})
		_node.ConnectedTime = value
	}
	if value, ok := sc.mutation.DisconnectedTime(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: session.FieldDisconnectedTime,
		})
		_node.DisconnectedTime = value
	}
	if nodes := sc.mutation.AssetsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   session.AssetsTable,
			Columns: []string{session.AssetsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: asset.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// SessionCreateBulk is the builder for creating many Session entities in bulk.
type SessionCreateBulk struct {
	config
	builders []*SessionCreate
}

// Save creates the Session entities in the database.
func (scb *SessionCreateBulk) Save(ctx context.Context) ([]*Session, error) {
	specs := make([]*sqlgraph.CreateSpec, len(scb.builders))
	nodes := make([]*Session, len(scb.builders))
	mutators := make([]Mutator, len(scb.builders))
	for i := range scb.builders {
		func(i int, root context.Context) {
			builder := scb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*SessionMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, scb.builders[i+1].mutation)
				} else {
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, scb.driver, &sqlgraph.BatchCreateSpec{Nodes: specs}); err != nil {
						if cerr, ok := isSQLConstraintError(err); ok {
							err = cerr
						}
					}
				}
				mutation.done = true
				if err != nil {
					return nil, err
				}
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, scb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (scb *SessionCreateBulk) SaveX(ctx context.Context) []*Session {
	v, err := scb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}
