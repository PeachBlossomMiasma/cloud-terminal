// Code generated by entc, DO NOT EDIT.

package user

import (
	"time"
)

const (
	// Label holds the string label denoting the user type in the database.
	Label = "user"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldUsername holds the string denoting the username field in the database.
	FieldUsername = "username"
	// FieldPassword holds the string denoting the password field in the database.
	FieldPassword = "password"
	// FieldEmail holds the string denoting the email field in the database.
	FieldEmail = "email"
	// FieldNickname holds the string denoting the nickname field in the database.
	FieldNickname = "nickname"
	// FieldTotpSecret holds the string denoting the totpsecret field in the database.
	FieldTotpSecret = "totp_secret"
	// FieldOnline holds the string denoting the online field in the database.
	FieldOnline = "online"
	// FieldEnable holds the string denoting the enable field in the database.
	FieldEnable = "enable"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldType holds the string denoting the type field in the database.
	FieldType = "type"

	// EdgeUserGroups holds the string denoting the user_groups edge name in mutations.
	EdgeUserGroups = "user_groups"

	// Table holds the table name of the user in the database.
	Table = "users"
	// UserGroupsTable is the table the holds the user_groups relation/edge. The primary key declared below.
	UserGroupsTable = "user_group_users"
	// UserGroupsInverseTable is the table name for the UserGroup entity.
	// It exists in this package in order to avoid circular dependency with the "usergroup" package.
	UserGroupsInverseTable = "user_groups"
)

// Columns holds all SQL columns for user fields.
var Columns = []string{
	FieldID,
	FieldUsername,
	FieldPassword,
	FieldEmail,
	FieldNickname,
	FieldTotpSecret,
	FieldOnline,
	FieldEnable,
	FieldCreatedAt,
	FieldUpdatedAt,
	FieldType,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the User type.
var ForeignKeys = []string{
	"verification_users",
}

var (
	// UserGroupsPrimaryKey and UserGroupsColumn2 are the table columns denoting the
	// primary key for the user_groups relation (M2M).
	UserGroupsPrimaryKey = []string{"user_group_id", "user_id"}
)

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
)
