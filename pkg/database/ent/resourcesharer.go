// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/willie-lin/cloud-terminal/pkg/database/ent/resourcesharer"
)

// ResourceSharer is the model entity for the ResourceSharer schema.
type ResourceSharer struct {
	config `json:"-"`
	// ID of the ent.
	ID string `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// ResourceID holds the value of the "resource_id" field.
	ResourceID string `json:"resource_id,omitempty"`
	// ResourceType holds the value of the "resource_type" field.
	ResourceType string `json:"resource_type,omitempty"`
	// UserID holds the value of the "user_id" field.
	UserID string `json:"user_id,omitempty"`
	// UserGroupID holds the value of the "userGroup_id" field.
	UserGroupID string `json:"userGroup_id,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*ResourceSharer) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case resourcesharer.FieldID, resourcesharer.FieldResourceID, resourcesharer.FieldResourceType, resourcesharer.FieldUserID, resourcesharer.FieldUserGroupID:
			values[i] = new(sql.NullString)
		case resourcesharer.FieldCreatedAt, resourcesharer.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		default:
			return nil, fmt.Errorf("unexpected column %q for type ResourceSharer", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the ResourceSharer fields.
func (rs *ResourceSharer) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case resourcesharer.FieldID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
				rs.ID = value.String
			}
		case resourcesharer.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				rs.CreatedAt = value.Time
			}
		case resourcesharer.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				rs.UpdatedAt = value.Time
			}
		case resourcesharer.FieldResourceID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field resource_id", values[i])
			} else if value.Valid {
				rs.ResourceID = value.String
			}
		case resourcesharer.FieldResourceType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field resource_type", values[i])
			} else if value.Valid {
				rs.ResourceType = value.String
			}
		case resourcesharer.FieldUserID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field user_id", values[i])
			} else if value.Valid {
				rs.UserID = value.String
			}
		case resourcesharer.FieldUserGroupID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field userGroup_id", values[i])
			} else if value.Valid {
				rs.UserGroupID = value.String
			}
		}
	}
	return nil
}

// Update returns a builder for updating this ResourceSharer.
// Note that you need to call ResourceSharer.Unwrap() before calling this method if this ResourceSharer
// was returned from a transaction, and the transaction was committed or rolled back.
func (rs *ResourceSharer) Update() *ResourceSharerUpdateOne {
	return (&ResourceSharerClient{config: rs.config}).UpdateOne(rs)
}

// Unwrap unwraps the ResourceSharer entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (rs *ResourceSharer) Unwrap() *ResourceSharer {
	tx, ok := rs.config.driver.(*txDriver)
	if !ok {
		panic("ent: ResourceSharer is not a transactional entity")
	}
	rs.config.driver = tx.drv
	return rs
}

// String implements the fmt.Stringer.
func (rs *ResourceSharer) String() string {
	var builder strings.Builder
	builder.WriteString("ResourceSharer(")
	builder.WriteString(fmt.Sprintf("id=%v", rs.ID))
	builder.WriteString(", created_at=")
	builder.WriteString(rs.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", updated_at=")
	builder.WriteString(rs.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", resource_id=")
	builder.WriteString(rs.ResourceID)
	builder.WriteString(", resource_type=")
	builder.WriteString(rs.ResourceType)
	builder.WriteString(", user_id=")
	builder.WriteString(rs.UserID)
	builder.WriteString(", userGroup_id=")
	builder.WriteString(rs.UserGroupID)
	builder.WriteByte(')')
	return builder.String()
}

// ResourceSharers is a parsable slice of ResourceSharer.
type ResourceSharers []*ResourceSharer

func (rs ResourceSharers) config(cfg config) {
	for _i := range rs {
		rs[_i].config = cfg
	}
}
