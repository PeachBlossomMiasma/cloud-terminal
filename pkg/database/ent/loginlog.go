// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/willie-lin/cloud-terminal/pkg/database/ent/loginlog"
)

// LoginLog is the model entity for the LoginLog schema.
type LoginLog struct {
	config `json:"-"`
	// ID of the ent.
	ID string `json:"id,omitempty"`
	// UserID holds the value of the "user_id" field.
	UserID string `json:"user_id,omitempty"`
	// ClientIP holds the value of the "client_ip" field.
	ClientIP string `json:"client_ip,omitempty"`
	// ClentUsetAgent holds the value of the "clent_uset_agent" field.
	ClentUsetAgent string `json:"clent_uset_agent,omitempty"`
	// LoginTime holds the value of the "login_time" field.
	LoginTime time.Time `json:"login_time,omitempty"`
	// LogoutTime holds the value of the "logout_time" field.
	LogoutTime time.Time `json:"logout_time,omitempty"`
	// Remember holds the value of the "remember" field.
	Remember bool `json:"remember,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*LoginLog) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case loginlog.FieldRemember:
			values[i] = new(sql.NullBool)
		case loginlog.FieldID, loginlog.FieldUserID, loginlog.FieldClientIP, loginlog.FieldClentUsetAgent:
			values[i] = new(sql.NullString)
		case loginlog.FieldLoginTime, loginlog.FieldLogoutTime:
			values[i] = new(sql.NullTime)
		default:
			return nil, fmt.Errorf("unexpected column %q for type LoginLog", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the LoginLog fields.
func (ll *LoginLog) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case loginlog.FieldID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
				ll.ID = value.String
			}
		case loginlog.FieldUserID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field user_id", values[i])
			} else if value.Valid {
				ll.UserID = value.String
			}
		case loginlog.FieldClientIP:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field client_ip", values[i])
			} else if value.Valid {
				ll.ClientIP = value.String
			}
		case loginlog.FieldClentUsetAgent:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field clent_uset_agent", values[i])
			} else if value.Valid {
				ll.ClentUsetAgent = value.String
			}
		case loginlog.FieldLoginTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field login_time", values[i])
			} else if value.Valid {
				ll.LoginTime = value.Time
			}
		case loginlog.FieldLogoutTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field logout_time", values[i])
			} else if value.Valid {
				ll.LogoutTime = value.Time
			}
		case loginlog.FieldRemember:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field remember", values[i])
			} else if value.Valid {
				ll.Remember = value.Bool
			}
		}
	}
	return nil
}

// Update returns a builder for updating this LoginLog.
// Note that you need to call LoginLog.Unwrap() before calling this method if this LoginLog
// was returned from a transaction, and the transaction was committed or rolled back.
func (ll *LoginLog) Update() *LoginLogUpdateOne {
	return (&LoginLogClient{config: ll.config}).UpdateOne(ll)
}

// Unwrap unwraps the LoginLog entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (ll *LoginLog) Unwrap() *LoginLog {
	tx, ok := ll.config.driver.(*txDriver)
	if !ok {
		panic("ent: LoginLog is not a transactional entity")
	}
	ll.config.driver = tx.drv
	return ll
}

// String implements the fmt.Stringer.
func (ll *LoginLog) String() string {
	var builder strings.Builder
	builder.WriteString("LoginLog(")
	builder.WriteString(fmt.Sprintf("id=%v", ll.ID))
	builder.WriteString(", user_id=")
	builder.WriteString(ll.UserID)
	builder.WriteString(", client_ip=")
	builder.WriteString(ll.ClientIP)
	builder.WriteString(", clent_uset_agent=")
	builder.WriteString(ll.ClentUsetAgent)
	builder.WriteString(", login_time=")
	builder.WriteString(ll.LoginTime.Format(time.ANSIC))
	builder.WriteString(", logout_time=")
	builder.WriteString(ll.LogoutTime.Format(time.ANSIC))
	builder.WriteString(", remember=")
	builder.WriteString(fmt.Sprintf("%v", ll.Remember))
	builder.WriteByte(')')
	return builder.String()
}

// LoginLogs is a parsable slice of LoginLog.
type LoginLogs []*LoginLog

func (ll LoginLogs) config(cfg config) {
	for _i := range ll {
		ll[_i].config = cfg
	}
}
