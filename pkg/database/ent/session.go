// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"github.com/facebook/ent/dialect/sql"
	"github.com/willie-lin/cloud-terminal/pkg/database/ent/session"
)

// Session is the model entity for the Session schema.
type Session struct {
	config `json:"-"`
	// ID of the ent.
	ID string `json:"id,omitempty"`
	// Protocol holds the value of the "protocol" field.
	Protocol string `json:"protocol,omitempty"`
	// IP holds the value of the "ip" field.
	IP string `json:"ip,omitempty"`
	// Port holds the value of the "port" field.
	Port int `json:"port,omitempty"`
	// ConnectionId holds the value of the "connectionId" field.
	ConnectionId string `json:"connectionId,omitempty"`
	// AssetId holds the value of the "AssetId" field.
	AssetId string `json:"AssetId,omitempty"`
	// Username holds the value of the "Username" field.
	Username string `json:"Username,omitempty"`
	// Password holds the value of the "Password" field.
	Password string `json:"Password,omitempty"`
	// Creator holds the value of the "Creator" field.
	Creator string `json:"Creator,omitempty"`
	// ClientIP holds the value of the "ClientIP" field.
	ClientIP string `json:"ClientIP,omitempty"`
	// Width holds the value of the "Width" field.
	Width int `json:"Width,omitempty"`
	// Height holds the value of the "Height" field.
	Height int `json:"Height,omitempty"`
	// Status holds the value of the "Status" field.
	Status string `json:"Status,omitempty"`
	// Recording holds the value of the "Recording" field.
	Recording string `json:"Recording,omitempty"`
	// PrivateKey holds the value of the "PrivateKey" field.
	PrivateKey string `json:"PrivateKey,omitempty"`
	// Passphrase holds the value of the "Passphrase" field.
	Passphrase string `json:"Passphrase,omitempty"`
	// Code holds the value of the "Code" field.
	Code int `json:"Code,omitempty"`
	// Message holds the value of the "Message" field.
	Message string `json:"Message,omitempty"`
	// ConnectedTime holds the value of the "ConnectedTime" field.
	ConnectedTime time.Time `json:"ConnectedTime,omitempty"`
	// DisconnectedTime holds the value of the "DisconnectedTime" field.
	DisconnectedTime time.Time `json:"DisconnectedTime,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Session) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case session.FieldPort, session.FieldWidth, session.FieldHeight, session.FieldCode:
			values[i] = &sql.NullInt64{}
		case session.FieldID, session.FieldProtocol, session.FieldIP, session.FieldConnectionId, session.FieldAssetId, session.FieldUsername, session.FieldPassword, session.FieldCreator, session.FieldClientIP, session.FieldStatus, session.FieldRecording, session.FieldPrivateKey, session.FieldPassphrase, session.FieldMessage:
			values[i] = &sql.NullString{}
		case session.FieldConnectedTime, session.FieldDisconnectedTime:
			values[i] = &sql.NullTime{}
		default:
			return nil, fmt.Errorf("unexpected column %q for type Session", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Session fields.
func (s *Session) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case session.FieldID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
				s.ID = value.String
			}
		case session.FieldProtocol:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field protocol", values[i])
			} else if value.Valid {
				s.Protocol = value.String
			}
		case session.FieldIP:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field ip", values[i])
			} else if value.Valid {
				s.IP = value.String
			}
		case session.FieldPort:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field port", values[i])
			} else if value.Valid {
				s.Port = int(value.Int64)
			}
		case session.FieldConnectionId:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field connectionId", values[i])
			} else if value.Valid {
				s.ConnectionId = value.String
			}
		case session.FieldAssetId:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field AssetId", values[i])
			} else if value.Valid {
				s.AssetId = value.String
			}
		case session.FieldUsername:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field Username", values[i])
			} else if value.Valid {
				s.Username = value.String
			}
		case session.FieldPassword:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field Password", values[i])
			} else if value.Valid {
				s.Password = value.String
			}
		case session.FieldCreator:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field Creator", values[i])
			} else if value.Valid {
				s.Creator = value.String
			}
		case session.FieldClientIP:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field ClientIP", values[i])
			} else if value.Valid {
				s.ClientIP = value.String
			}
		case session.FieldWidth:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field Width", values[i])
			} else if value.Valid {
				s.Width = int(value.Int64)
			}
		case session.FieldHeight:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field Height", values[i])
			} else if value.Valid {
				s.Height = int(value.Int64)
			}
		case session.FieldStatus:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field Status", values[i])
			} else if value.Valid {
				s.Status = value.String
			}
		case session.FieldRecording:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field Recording", values[i])
			} else if value.Valid {
				s.Recording = value.String
			}
		case session.FieldPrivateKey:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field PrivateKey", values[i])
			} else if value.Valid {
				s.PrivateKey = value.String
			}
		case session.FieldPassphrase:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field Passphrase", values[i])
			} else if value.Valid {
				s.Passphrase = value.String
			}
		case session.FieldCode:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field Code", values[i])
			} else if value.Valid {
				s.Code = int(value.Int64)
			}
		case session.FieldMessage:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field Message", values[i])
			} else if value.Valid {
				s.Message = value.String
			}
		case session.FieldConnectedTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field ConnectedTime", values[i])
			} else if value.Valid {
				s.ConnectedTime = value.Time
			}
		case session.FieldDisconnectedTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field DisconnectedTime", values[i])
			} else if value.Valid {
				s.DisconnectedTime = value.Time
			}
		}
	}
	return nil
}

// Update returns a builder for updating this Session.
// Note that you need to call Session.Unwrap() before calling this method if this Session
// was returned from a transaction, and the transaction was committed or rolled back.
func (s *Session) Update() *SessionUpdateOne {
	return (&SessionClient{config: s.config}).UpdateOne(s)
}

// Unwrap unwraps the Session entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (s *Session) Unwrap() *Session {
	tx, ok := s.config.driver.(*txDriver)
	if !ok {
		panic("ent: Session is not a transactional entity")
	}
	s.config.driver = tx.drv
	return s
}

// String implements the fmt.Stringer.
func (s *Session) String() string {
	var builder strings.Builder
	builder.WriteString("Session(")
	builder.WriteString(fmt.Sprintf("id=%v", s.ID))
	builder.WriteString(", protocol=")
	builder.WriteString(s.Protocol)
	builder.WriteString(", ip=")
	builder.WriteString(s.IP)
	builder.WriteString(", port=")
	builder.WriteString(fmt.Sprintf("%v", s.Port))
	builder.WriteString(", connectionId=")
	builder.WriteString(s.ConnectionId)
	builder.WriteString(", AssetId=")
	builder.WriteString(s.AssetId)
	builder.WriteString(", Username=")
	builder.WriteString(s.Username)
	builder.WriteString(", Password=")
	builder.WriteString(s.Password)
	builder.WriteString(", Creator=")
	builder.WriteString(s.Creator)
	builder.WriteString(", ClientIP=")
	builder.WriteString(s.ClientIP)
	builder.WriteString(", Width=")
	builder.WriteString(fmt.Sprintf("%v", s.Width))
	builder.WriteString(", Height=")
	builder.WriteString(fmt.Sprintf("%v", s.Height))
	builder.WriteString(", Status=")
	builder.WriteString(s.Status)
	builder.WriteString(", Recording=")
	builder.WriteString(s.Recording)
	builder.WriteString(", PrivateKey=")
	builder.WriteString(s.PrivateKey)
	builder.WriteString(", Passphrase=")
	builder.WriteString(s.Passphrase)
	builder.WriteString(", Code=")
	builder.WriteString(fmt.Sprintf("%v", s.Code))
	builder.WriteString(", Message=")
	builder.WriteString(s.Message)
	builder.WriteString(", ConnectedTime=")
	builder.WriteString(s.ConnectedTime.Format(time.ANSIC))
	builder.WriteString(", DisconnectedTime=")
	builder.WriteString(s.DisconnectedTime.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// Sessions is a parsable slice of Session.
type Sessions []*Session

func (s Sessions) config(cfg config) {
	for _i := range s {
		s[_i].config = cfg
	}
}
