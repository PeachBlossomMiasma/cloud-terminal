// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/willie-lin/cloud-terminal/pkg/database/ent/resourcesharer"
)

// ResourceSharerCreate is the builder for creating a ResourceSharer entity.
type ResourceSharerCreate struct {
	config
	mutation *ResourceSharerMutation
	hooks    []Hook
}

// SetResourceID sets the "resource_id" field.
func (rsc *ResourceSharerCreate) SetResourceID(s string) *ResourceSharerCreate {
	rsc.mutation.SetResourceID(s)
	return rsc
}

// SetResourceType sets the "resource_type" field.
func (rsc *ResourceSharerCreate) SetResourceType(s string) *ResourceSharerCreate {
	rsc.mutation.SetResourceType(s)
	return rsc
}

// SetUserID sets the "user_id" field.
func (rsc *ResourceSharerCreate) SetUserID(s string) *ResourceSharerCreate {
	rsc.mutation.SetUserID(s)
	return rsc
}

// SetUserGroupID sets the "userGroup_id" field.
func (rsc *ResourceSharerCreate) SetUserGroupID(s string) *ResourceSharerCreate {
	rsc.mutation.SetUserGroupID(s)
	return rsc
}

// SetID sets the "id" field.
func (rsc *ResourceSharerCreate) SetID(s string) *ResourceSharerCreate {
	rsc.mutation.SetID(s)
	return rsc
}

// Mutation returns the ResourceSharerMutation object of the builder.
func (rsc *ResourceSharerCreate) Mutation() *ResourceSharerMutation {
	return rsc.mutation
}

// Save creates the ResourceSharer in the database.
func (rsc *ResourceSharerCreate) Save(ctx context.Context) (*ResourceSharer, error) {
	var (
		err  error
		node *ResourceSharer
	)
	if len(rsc.hooks) == 0 {
		if err = rsc.check(); err != nil {
			return nil, err
		}
		node, err = rsc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ResourceSharerMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = rsc.check(); err != nil {
				return nil, err
			}
			rsc.mutation = mutation
			node, err = rsc.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(rsc.hooks) - 1; i >= 0; i-- {
			mut = rsc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, rsc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (rsc *ResourceSharerCreate) SaveX(ctx context.Context) *ResourceSharer {
	v, err := rsc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// check runs all checks and user-defined validators on the builder.
func (rsc *ResourceSharerCreate) check() error {
	if _, ok := rsc.mutation.ResourceID(); !ok {
		return &ValidationError{Name: "resource_id", err: errors.New("ent: missing required field \"resource_id\"")}
	}
	if _, ok := rsc.mutation.ResourceType(); !ok {
		return &ValidationError{Name: "resource_type", err: errors.New("ent: missing required field \"resource_type\"")}
	}
	if _, ok := rsc.mutation.UserID(); !ok {
		return &ValidationError{Name: "user_id", err: errors.New("ent: missing required field \"user_id\"")}
	}
	if _, ok := rsc.mutation.UserGroupID(); !ok {
		return &ValidationError{Name: "userGroup_id", err: errors.New("ent: missing required field \"userGroup_id\"")}
	}
	return nil
}

func (rsc *ResourceSharerCreate) sqlSave(ctx context.Context) (*ResourceSharer, error) {
	_node, _spec := rsc.createSpec()
	if err := sqlgraph.CreateNode(ctx, rsc.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return _node, nil
}

func (rsc *ResourceSharerCreate) createSpec() (*ResourceSharer, *sqlgraph.CreateSpec) {
	var (
		_node = &ResourceSharer{config: rsc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: resourcesharer.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: resourcesharer.FieldID,
			},
		}
	)
	if id, ok := rsc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := rsc.mutation.ResourceID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: resourcesharer.FieldResourceID,
		})
		_node.ResourceID = value
	}
	if value, ok := rsc.mutation.ResourceType(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: resourcesharer.FieldResourceType,
		})
		_node.ResourceType = value
	}
	if value, ok := rsc.mutation.UserID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: resourcesharer.FieldUserID,
		})
		_node.UserID = value
	}
	if value, ok := rsc.mutation.UserGroupID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: resourcesharer.FieldUserGroupID,
		})
		_node.UserGroupID = value
	}
	return _node, _spec
}

// ResourceSharerCreateBulk is the builder for creating many ResourceSharer entities in bulk.
type ResourceSharerCreateBulk struct {
	config
	builders []*ResourceSharerCreate
}

// Save creates the ResourceSharer entities in the database.
func (rscb *ResourceSharerCreateBulk) Save(ctx context.Context) ([]*ResourceSharer, error) {
	specs := make([]*sqlgraph.CreateSpec, len(rscb.builders))
	nodes := make([]*ResourceSharer, len(rscb.builders))
	mutators := make([]Mutator, len(rscb.builders))
	for i := range rscb.builders {
		func(i int, root context.Context) {
			builder := rscb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ResourceSharerMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, rscb.builders[i+1].mutation)
				} else {
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, rscb.driver, &sqlgraph.BatchCreateSpec{Nodes: specs}); err != nil {
						if cerr, ok := isSQLConstraintError(err); ok {
							err = cerr
						}
					}
				}
				mutation.done = true
				if err != nil {
					return nil, err
				}
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, rscb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (rscb *ResourceSharerCreateBulk) SaveX(ctx context.Context) []*ResourceSharer {
	v, err := rscb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}
