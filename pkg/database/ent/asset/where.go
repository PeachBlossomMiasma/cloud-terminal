// Code generated by entc, DO NOT EDIT.

package asset

import (
	"time"

	"github.com/facebook/ent/dialect/sql"
	"github.com/facebook/ent/dialect/sql/sqlgraph"
	"github.com/willie-lin/cloud-terminal/pkg/database/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id string) predicate.Asset {
	return predicate.Asset(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id string) predicate.Asset {
	return predicate.Asset(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id string) predicate.Asset {
	return predicate.Asset(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...string) predicate.Asset {
	return predicate.Asset(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...string) predicate.Asset {
	return predicate.Asset(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id string) predicate.Asset {
	return predicate.Asset(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id string) predicate.Asset {
	return predicate.Asset(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id string) predicate.Asset {
	return predicate.Asset(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id string) predicate.Asset {
	return predicate.Asset(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// Name applies equality check predicate on the "name" field. It's identical to NameEQ.
func Name(v string) predicate.Asset {
	return predicate.Asset(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldName), v))
	})
}

// IP applies equality check predicate on the "ip" field. It's identical to IPEQ.
func IP(v string) predicate.Asset {
	return predicate.Asset(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldIP), v))
	})
}

// Protocol applies equality check predicate on the "protocol" field. It's identical to ProtocolEQ.
func Protocol(v string) predicate.Asset {
	return predicate.Asset(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldProtocol), v))
	})
}

// Port applies equality check predicate on the "port" field. It's identical to PortEQ.
func Port(v int) predicate.Asset {
	return predicate.Asset(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPort), v))
	})
}

// AccountType applies equality check predicate on the "account_type" field. It's identical to AccountTypeEQ.
func AccountType(v string) predicate.Asset {
	return predicate.Asset(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAccountType), v))
	})
}

// Username applies equality check predicate on the "username" field. It's identical to UsernameEQ.
func Username(v string) predicate.Asset {
	return predicate.Asset(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUsername), v))
	})
}

// Password applies equality check predicate on the "password" field. It's identical to PasswordEQ.
func Password(v string) predicate.Asset {
	return predicate.Asset(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPassword), v))
	})
}

// CredentialID applies equality check predicate on the "credential_id" field. It's identical to CredentialIDEQ.
func CredentialID(v string) predicate.Asset {
	return predicate.Asset(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCredentialID), v))
	})
}

// PrivateKey applies equality check predicate on the "private_key" field. It's identical to PrivateKeyEQ.
func PrivateKey(v string) predicate.Asset {
	return predicate.Asset(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPrivateKey), v))
	})
}

// Passphrase applies equality check predicate on the "passphrase" field. It's identical to PassphraseEQ.
func Passphrase(v string) predicate.Asset {
	return predicate.Asset(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPassphrase), v))
	})
}

// Description applies equality check predicate on the "description" field. It's identical to DescriptionEQ.
func Description(v string) predicate.Asset {
	return predicate.Asset(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDescription), v))
	})
}

// Active applies equality check predicate on the "active" field. It's identical to ActiveEQ.
func Active(v bool) predicate.Asset {
	return predicate.Asset(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldActive), v))
	})
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.Asset {
	return predicate.Asset(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedAt), v))
	})
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.Asset {
	return predicate.Asset(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdatedAt), v))
	})
}

// Tags applies equality check predicate on the "tags" field. It's identical to TagsEQ.
func Tags(v string) predicate.Asset {
	return predicate.Asset(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTags), v))
	})
}

// NameEQ applies the EQ predicate on the "name" field.
func NameEQ(v string) predicate.Asset {
	return predicate.Asset(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldName), v))
	})
}

// NameNEQ applies the NEQ predicate on the "name" field.
func NameNEQ(v string) predicate.Asset {
	return predicate.Asset(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldName), v))
	})
}

// NameIn applies the In predicate on the "name" field.
func NameIn(vs ...string) predicate.Asset {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Asset(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldName), v...))
	})
}

// NameNotIn applies the NotIn predicate on the "name" field.
func NameNotIn(vs ...string) predicate.Asset {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Asset(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldName), v...))
	})
}

// NameGT applies the GT predicate on the "name" field.
func NameGT(v string) predicate.Asset {
	return predicate.Asset(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldName), v))
	})
}

// NameGTE applies the GTE predicate on the "name" field.
func NameGTE(v string) predicate.Asset {
	return predicate.Asset(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldName), v))
	})
}

// NameLT applies the LT predicate on the "name" field.
func NameLT(v string) predicate.Asset {
	return predicate.Asset(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldName), v))
	})
}

// NameLTE applies the LTE predicate on the "name" field.
func NameLTE(v string) predicate.Asset {
	return predicate.Asset(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldName), v))
	})
}

// NameContains applies the Contains predicate on the "name" field.
func NameContains(v string) predicate.Asset {
	return predicate.Asset(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldName), v))
	})
}

// NameHasPrefix applies the HasPrefix predicate on the "name" field.
func NameHasPrefix(v string) predicate.Asset {
	return predicate.Asset(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldName), v))
	})
}

// NameHasSuffix applies the HasSuffix predicate on the "name" field.
func NameHasSuffix(v string) predicate.Asset {
	return predicate.Asset(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldName), v))
	})
}

// NameEqualFold applies the EqualFold predicate on the "name" field.
func NameEqualFold(v string) predicate.Asset {
	return predicate.Asset(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldName), v))
	})
}

// NameContainsFold applies the ContainsFold predicate on the "name" field.
func NameContainsFold(v string) predicate.Asset {
	return predicate.Asset(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldName), v))
	})
}

// IPEQ applies the EQ predicate on the "ip" field.
func IPEQ(v string) predicate.Asset {
	return predicate.Asset(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldIP), v))
	})
}

// IPNEQ applies the NEQ predicate on the "ip" field.
func IPNEQ(v string) predicate.Asset {
	return predicate.Asset(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldIP), v))
	})
}

// IPIn applies the In predicate on the "ip" field.
func IPIn(vs ...string) predicate.Asset {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Asset(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldIP), v...))
	})
}

// IPNotIn applies the NotIn predicate on the "ip" field.
func IPNotIn(vs ...string) predicate.Asset {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Asset(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldIP), v...))
	})
}

// IPGT applies the GT predicate on the "ip" field.
func IPGT(v string) predicate.Asset {
	return predicate.Asset(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldIP), v))
	})
}

// IPGTE applies the GTE predicate on the "ip" field.
func IPGTE(v string) predicate.Asset {
	return predicate.Asset(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldIP), v))
	})
}

// IPLT applies the LT predicate on the "ip" field.
func IPLT(v string) predicate.Asset {
	return predicate.Asset(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldIP), v))
	})
}

// IPLTE applies the LTE predicate on the "ip" field.
func IPLTE(v string) predicate.Asset {
	return predicate.Asset(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldIP), v))
	})
}

// IPContains applies the Contains predicate on the "ip" field.
func IPContains(v string) predicate.Asset {
	return predicate.Asset(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldIP), v))
	})
}

// IPHasPrefix applies the HasPrefix predicate on the "ip" field.
func IPHasPrefix(v string) predicate.Asset {
	return predicate.Asset(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldIP), v))
	})
}

// IPHasSuffix applies the HasSuffix predicate on the "ip" field.
func IPHasSuffix(v string) predicate.Asset {
	return predicate.Asset(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldIP), v))
	})
}

// IPEqualFold applies the EqualFold predicate on the "ip" field.
func IPEqualFold(v string) predicate.Asset {
	return predicate.Asset(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldIP), v))
	})
}

// IPContainsFold applies the ContainsFold predicate on the "ip" field.
func IPContainsFold(v string) predicate.Asset {
	return predicate.Asset(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldIP), v))
	})
}

// ProtocolEQ applies the EQ predicate on the "protocol" field.
func ProtocolEQ(v string) predicate.Asset {
	return predicate.Asset(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldProtocol), v))
	})
}

// ProtocolNEQ applies the NEQ predicate on the "protocol" field.
func ProtocolNEQ(v string) predicate.Asset {
	return predicate.Asset(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldProtocol), v))
	})
}

// ProtocolIn applies the In predicate on the "protocol" field.
func ProtocolIn(vs ...string) predicate.Asset {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Asset(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldProtocol), v...))
	})
}

// ProtocolNotIn applies the NotIn predicate on the "protocol" field.
func ProtocolNotIn(vs ...string) predicate.Asset {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Asset(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldProtocol), v...))
	})
}

// ProtocolGT applies the GT predicate on the "protocol" field.
func ProtocolGT(v string) predicate.Asset {
	return predicate.Asset(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldProtocol), v))
	})
}

// ProtocolGTE applies the GTE predicate on the "protocol" field.
func ProtocolGTE(v string) predicate.Asset {
	return predicate.Asset(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldProtocol), v))
	})
}

// ProtocolLT applies the LT predicate on the "protocol" field.
func ProtocolLT(v string) predicate.Asset {
	return predicate.Asset(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldProtocol), v))
	})
}

// ProtocolLTE applies the LTE predicate on the "protocol" field.
func ProtocolLTE(v string) predicate.Asset {
	return predicate.Asset(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldProtocol), v))
	})
}

// ProtocolContains applies the Contains predicate on the "protocol" field.
func ProtocolContains(v string) predicate.Asset {
	return predicate.Asset(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldProtocol), v))
	})
}

// ProtocolHasPrefix applies the HasPrefix predicate on the "protocol" field.
func ProtocolHasPrefix(v string) predicate.Asset {
	return predicate.Asset(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldProtocol), v))
	})
}

// ProtocolHasSuffix applies the HasSuffix predicate on the "protocol" field.
func ProtocolHasSuffix(v string) predicate.Asset {
	return predicate.Asset(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldProtocol), v))
	})
}

// ProtocolEqualFold applies the EqualFold predicate on the "protocol" field.
func ProtocolEqualFold(v string) predicate.Asset {
	return predicate.Asset(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldProtocol), v))
	})
}

// ProtocolContainsFold applies the ContainsFold predicate on the "protocol" field.
func ProtocolContainsFold(v string) predicate.Asset {
	return predicate.Asset(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldProtocol), v))
	})
}

// PortEQ applies the EQ predicate on the "port" field.
func PortEQ(v int) predicate.Asset {
	return predicate.Asset(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPort), v))
	})
}

// PortNEQ applies the NEQ predicate on the "port" field.
func PortNEQ(v int) predicate.Asset {
	return predicate.Asset(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldPort), v))
	})
}

// PortIn applies the In predicate on the "port" field.
func PortIn(vs ...int) predicate.Asset {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Asset(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldPort), v...))
	})
}

// PortNotIn applies the NotIn predicate on the "port" field.
func PortNotIn(vs ...int) predicate.Asset {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Asset(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldPort), v...))
	})
}

// PortGT applies the GT predicate on the "port" field.
func PortGT(v int) predicate.Asset {
	return predicate.Asset(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldPort), v))
	})
}

// PortGTE applies the GTE predicate on the "port" field.
func PortGTE(v int) predicate.Asset {
	return predicate.Asset(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldPort), v))
	})
}

// PortLT applies the LT predicate on the "port" field.
func PortLT(v int) predicate.Asset {
	return predicate.Asset(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldPort), v))
	})
}

// PortLTE applies the LTE predicate on the "port" field.
func PortLTE(v int) predicate.Asset {
	return predicate.Asset(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldPort), v))
	})
}

// AccountTypeEQ applies the EQ predicate on the "account_type" field.
func AccountTypeEQ(v string) predicate.Asset {
	return predicate.Asset(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAccountType), v))
	})
}

// AccountTypeNEQ applies the NEQ predicate on the "account_type" field.
func AccountTypeNEQ(v string) predicate.Asset {
	return predicate.Asset(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldAccountType), v))
	})
}

// AccountTypeIn applies the In predicate on the "account_type" field.
func AccountTypeIn(vs ...string) predicate.Asset {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Asset(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldAccountType), v...))
	})
}

// AccountTypeNotIn applies the NotIn predicate on the "account_type" field.
func AccountTypeNotIn(vs ...string) predicate.Asset {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Asset(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldAccountType), v...))
	})
}

// AccountTypeGT applies the GT predicate on the "account_type" field.
func AccountTypeGT(v string) predicate.Asset {
	return predicate.Asset(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldAccountType), v))
	})
}

// AccountTypeGTE applies the GTE predicate on the "account_type" field.
func AccountTypeGTE(v string) predicate.Asset {
	return predicate.Asset(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldAccountType), v))
	})
}

// AccountTypeLT applies the LT predicate on the "account_type" field.
func AccountTypeLT(v string) predicate.Asset {
	return predicate.Asset(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldAccountType), v))
	})
}

// AccountTypeLTE applies the LTE predicate on the "account_type" field.
func AccountTypeLTE(v string) predicate.Asset {
	return predicate.Asset(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldAccountType), v))
	})
}

// AccountTypeContains applies the Contains predicate on the "account_type" field.
func AccountTypeContains(v string) predicate.Asset {
	return predicate.Asset(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldAccountType), v))
	})
}

// AccountTypeHasPrefix applies the HasPrefix predicate on the "account_type" field.
func AccountTypeHasPrefix(v string) predicate.Asset {
	return predicate.Asset(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldAccountType), v))
	})
}

// AccountTypeHasSuffix applies the HasSuffix predicate on the "account_type" field.
func AccountTypeHasSuffix(v string) predicate.Asset {
	return predicate.Asset(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldAccountType), v))
	})
}

// AccountTypeEqualFold applies the EqualFold predicate on the "account_type" field.
func AccountTypeEqualFold(v string) predicate.Asset {
	return predicate.Asset(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldAccountType), v))
	})
}

// AccountTypeContainsFold applies the ContainsFold predicate on the "account_type" field.
func AccountTypeContainsFold(v string) predicate.Asset {
	return predicate.Asset(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldAccountType), v))
	})
}

// UsernameEQ applies the EQ predicate on the "username" field.
func UsernameEQ(v string) predicate.Asset {
	return predicate.Asset(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUsername), v))
	})
}

// UsernameNEQ applies the NEQ predicate on the "username" field.
func UsernameNEQ(v string) predicate.Asset {
	return predicate.Asset(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUsername), v))
	})
}

// UsernameIn applies the In predicate on the "username" field.
func UsernameIn(vs ...string) predicate.Asset {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Asset(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldUsername), v...))
	})
}

// UsernameNotIn applies the NotIn predicate on the "username" field.
func UsernameNotIn(vs ...string) predicate.Asset {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Asset(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldUsername), v...))
	})
}

// UsernameGT applies the GT predicate on the "username" field.
func UsernameGT(v string) predicate.Asset {
	return predicate.Asset(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUsername), v))
	})
}

// UsernameGTE applies the GTE predicate on the "username" field.
func UsernameGTE(v string) predicate.Asset {
	return predicate.Asset(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUsername), v))
	})
}

// UsernameLT applies the LT predicate on the "username" field.
func UsernameLT(v string) predicate.Asset {
	return predicate.Asset(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUsername), v))
	})
}

// UsernameLTE applies the LTE predicate on the "username" field.
func UsernameLTE(v string) predicate.Asset {
	return predicate.Asset(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUsername), v))
	})
}

// UsernameContains applies the Contains predicate on the "username" field.
func UsernameContains(v string) predicate.Asset {
	return predicate.Asset(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldUsername), v))
	})
}

// UsernameHasPrefix applies the HasPrefix predicate on the "username" field.
func UsernameHasPrefix(v string) predicate.Asset {
	return predicate.Asset(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldUsername), v))
	})
}

// UsernameHasSuffix applies the HasSuffix predicate on the "username" field.
func UsernameHasSuffix(v string) predicate.Asset {
	return predicate.Asset(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldUsername), v))
	})
}

// UsernameEqualFold applies the EqualFold predicate on the "username" field.
func UsernameEqualFold(v string) predicate.Asset {
	return predicate.Asset(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldUsername), v))
	})
}

// UsernameContainsFold applies the ContainsFold predicate on the "username" field.
func UsernameContainsFold(v string) predicate.Asset {
	return predicate.Asset(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldUsername), v))
	})
}

// PasswordEQ applies the EQ predicate on the "password" field.
func PasswordEQ(v string) predicate.Asset {
	return predicate.Asset(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPassword), v))
	})
}

// PasswordNEQ applies the NEQ predicate on the "password" field.
func PasswordNEQ(v string) predicate.Asset {
	return predicate.Asset(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldPassword), v))
	})
}

// PasswordIn applies the In predicate on the "password" field.
func PasswordIn(vs ...string) predicate.Asset {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Asset(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldPassword), v...))
	})
}

// PasswordNotIn applies the NotIn predicate on the "password" field.
func PasswordNotIn(vs ...string) predicate.Asset {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Asset(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldPassword), v...))
	})
}

// PasswordGT applies the GT predicate on the "password" field.
func PasswordGT(v string) predicate.Asset {
	return predicate.Asset(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldPassword), v))
	})
}

// PasswordGTE applies the GTE predicate on the "password" field.
func PasswordGTE(v string) predicate.Asset {
	return predicate.Asset(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldPassword), v))
	})
}

// PasswordLT applies the LT predicate on the "password" field.
func PasswordLT(v string) predicate.Asset {
	return predicate.Asset(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldPassword), v))
	})
}

// PasswordLTE applies the LTE predicate on the "password" field.
func PasswordLTE(v string) predicate.Asset {
	return predicate.Asset(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldPassword), v))
	})
}

// PasswordContains applies the Contains predicate on the "password" field.
func PasswordContains(v string) predicate.Asset {
	return predicate.Asset(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldPassword), v))
	})
}

// PasswordHasPrefix applies the HasPrefix predicate on the "password" field.
func PasswordHasPrefix(v string) predicate.Asset {
	return predicate.Asset(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldPassword), v))
	})
}

// PasswordHasSuffix applies the HasSuffix predicate on the "password" field.
func PasswordHasSuffix(v string) predicate.Asset {
	return predicate.Asset(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldPassword), v))
	})
}

// PasswordEqualFold applies the EqualFold predicate on the "password" field.
func PasswordEqualFold(v string) predicate.Asset {
	return predicate.Asset(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldPassword), v))
	})
}

// PasswordContainsFold applies the ContainsFold predicate on the "password" field.
func PasswordContainsFold(v string) predicate.Asset {
	return predicate.Asset(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldPassword), v))
	})
}

// CredentialIDEQ applies the EQ predicate on the "credential_id" field.
func CredentialIDEQ(v string) predicate.Asset {
	return predicate.Asset(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCredentialID), v))
	})
}

// CredentialIDNEQ applies the NEQ predicate on the "credential_id" field.
func CredentialIDNEQ(v string) predicate.Asset {
	return predicate.Asset(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCredentialID), v))
	})
}

// CredentialIDIn applies the In predicate on the "credential_id" field.
func CredentialIDIn(vs ...string) predicate.Asset {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Asset(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldCredentialID), v...))
	})
}

// CredentialIDNotIn applies the NotIn predicate on the "credential_id" field.
func CredentialIDNotIn(vs ...string) predicate.Asset {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Asset(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldCredentialID), v...))
	})
}

// CredentialIDGT applies the GT predicate on the "credential_id" field.
func CredentialIDGT(v string) predicate.Asset {
	return predicate.Asset(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCredentialID), v))
	})
}

// CredentialIDGTE applies the GTE predicate on the "credential_id" field.
func CredentialIDGTE(v string) predicate.Asset {
	return predicate.Asset(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCredentialID), v))
	})
}

// CredentialIDLT applies the LT predicate on the "credential_id" field.
func CredentialIDLT(v string) predicate.Asset {
	return predicate.Asset(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCredentialID), v))
	})
}

// CredentialIDLTE applies the LTE predicate on the "credential_id" field.
func CredentialIDLTE(v string) predicate.Asset {
	return predicate.Asset(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCredentialID), v))
	})
}

// CredentialIDContains applies the Contains predicate on the "credential_id" field.
func CredentialIDContains(v string) predicate.Asset {
	return predicate.Asset(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldCredentialID), v))
	})
}

// CredentialIDHasPrefix applies the HasPrefix predicate on the "credential_id" field.
func CredentialIDHasPrefix(v string) predicate.Asset {
	return predicate.Asset(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldCredentialID), v))
	})
}

// CredentialIDHasSuffix applies the HasSuffix predicate on the "credential_id" field.
func CredentialIDHasSuffix(v string) predicate.Asset {
	return predicate.Asset(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldCredentialID), v))
	})
}

// CredentialIDEqualFold applies the EqualFold predicate on the "credential_id" field.
func CredentialIDEqualFold(v string) predicate.Asset {
	return predicate.Asset(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldCredentialID), v))
	})
}

// CredentialIDContainsFold applies the ContainsFold predicate on the "credential_id" field.
func CredentialIDContainsFold(v string) predicate.Asset {
	return predicate.Asset(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldCredentialID), v))
	})
}

// PrivateKeyEQ applies the EQ predicate on the "private_key" field.
func PrivateKeyEQ(v string) predicate.Asset {
	return predicate.Asset(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPrivateKey), v))
	})
}

// PrivateKeyNEQ applies the NEQ predicate on the "private_key" field.
func PrivateKeyNEQ(v string) predicate.Asset {
	return predicate.Asset(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldPrivateKey), v))
	})
}

// PrivateKeyIn applies the In predicate on the "private_key" field.
func PrivateKeyIn(vs ...string) predicate.Asset {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Asset(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldPrivateKey), v...))
	})
}

// PrivateKeyNotIn applies the NotIn predicate on the "private_key" field.
func PrivateKeyNotIn(vs ...string) predicate.Asset {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Asset(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldPrivateKey), v...))
	})
}

// PrivateKeyGT applies the GT predicate on the "private_key" field.
func PrivateKeyGT(v string) predicate.Asset {
	return predicate.Asset(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldPrivateKey), v))
	})
}

// PrivateKeyGTE applies the GTE predicate on the "private_key" field.
func PrivateKeyGTE(v string) predicate.Asset {
	return predicate.Asset(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldPrivateKey), v))
	})
}

// PrivateKeyLT applies the LT predicate on the "private_key" field.
func PrivateKeyLT(v string) predicate.Asset {
	return predicate.Asset(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldPrivateKey), v))
	})
}

// PrivateKeyLTE applies the LTE predicate on the "private_key" field.
func PrivateKeyLTE(v string) predicate.Asset {
	return predicate.Asset(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldPrivateKey), v))
	})
}

// PrivateKeyContains applies the Contains predicate on the "private_key" field.
func PrivateKeyContains(v string) predicate.Asset {
	return predicate.Asset(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldPrivateKey), v))
	})
}

// PrivateKeyHasPrefix applies the HasPrefix predicate on the "private_key" field.
func PrivateKeyHasPrefix(v string) predicate.Asset {
	return predicate.Asset(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldPrivateKey), v))
	})
}

// PrivateKeyHasSuffix applies the HasSuffix predicate on the "private_key" field.
func PrivateKeyHasSuffix(v string) predicate.Asset {
	return predicate.Asset(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldPrivateKey), v))
	})
}

// PrivateKeyEqualFold applies the EqualFold predicate on the "private_key" field.
func PrivateKeyEqualFold(v string) predicate.Asset {
	return predicate.Asset(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldPrivateKey), v))
	})
}

// PrivateKeyContainsFold applies the ContainsFold predicate on the "private_key" field.
func PrivateKeyContainsFold(v string) predicate.Asset {
	return predicate.Asset(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldPrivateKey), v))
	})
}

// PassphraseEQ applies the EQ predicate on the "passphrase" field.
func PassphraseEQ(v string) predicate.Asset {
	return predicate.Asset(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPassphrase), v))
	})
}

// PassphraseNEQ applies the NEQ predicate on the "passphrase" field.
func PassphraseNEQ(v string) predicate.Asset {
	return predicate.Asset(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldPassphrase), v))
	})
}

// PassphraseIn applies the In predicate on the "passphrase" field.
func PassphraseIn(vs ...string) predicate.Asset {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Asset(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldPassphrase), v...))
	})
}

// PassphraseNotIn applies the NotIn predicate on the "passphrase" field.
func PassphraseNotIn(vs ...string) predicate.Asset {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Asset(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldPassphrase), v...))
	})
}

// PassphraseGT applies the GT predicate on the "passphrase" field.
func PassphraseGT(v string) predicate.Asset {
	return predicate.Asset(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldPassphrase), v))
	})
}

// PassphraseGTE applies the GTE predicate on the "passphrase" field.
func PassphraseGTE(v string) predicate.Asset {
	return predicate.Asset(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldPassphrase), v))
	})
}

// PassphraseLT applies the LT predicate on the "passphrase" field.
func PassphraseLT(v string) predicate.Asset {
	return predicate.Asset(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldPassphrase), v))
	})
}

// PassphraseLTE applies the LTE predicate on the "passphrase" field.
func PassphraseLTE(v string) predicate.Asset {
	return predicate.Asset(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldPassphrase), v))
	})
}

// PassphraseContains applies the Contains predicate on the "passphrase" field.
func PassphraseContains(v string) predicate.Asset {
	return predicate.Asset(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldPassphrase), v))
	})
}

// PassphraseHasPrefix applies the HasPrefix predicate on the "passphrase" field.
func PassphraseHasPrefix(v string) predicate.Asset {
	return predicate.Asset(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldPassphrase), v))
	})
}

// PassphraseHasSuffix applies the HasSuffix predicate on the "passphrase" field.
func PassphraseHasSuffix(v string) predicate.Asset {
	return predicate.Asset(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldPassphrase), v))
	})
}

// PassphraseEqualFold applies the EqualFold predicate on the "passphrase" field.
func PassphraseEqualFold(v string) predicate.Asset {
	return predicate.Asset(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldPassphrase), v))
	})
}

// PassphraseContainsFold applies the ContainsFold predicate on the "passphrase" field.
func PassphraseContainsFold(v string) predicate.Asset {
	return predicate.Asset(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldPassphrase), v))
	})
}

// DescriptionEQ applies the EQ predicate on the "description" field.
func DescriptionEQ(v string) predicate.Asset {
	return predicate.Asset(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDescription), v))
	})
}

// DescriptionNEQ applies the NEQ predicate on the "description" field.
func DescriptionNEQ(v string) predicate.Asset {
	return predicate.Asset(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldDescription), v))
	})
}

// DescriptionIn applies the In predicate on the "description" field.
func DescriptionIn(vs ...string) predicate.Asset {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Asset(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldDescription), v...))
	})
}

// DescriptionNotIn applies the NotIn predicate on the "description" field.
func DescriptionNotIn(vs ...string) predicate.Asset {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Asset(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldDescription), v...))
	})
}

// DescriptionGT applies the GT predicate on the "description" field.
func DescriptionGT(v string) predicate.Asset {
	return predicate.Asset(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldDescription), v))
	})
}

// DescriptionGTE applies the GTE predicate on the "description" field.
func DescriptionGTE(v string) predicate.Asset {
	return predicate.Asset(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldDescription), v))
	})
}

// DescriptionLT applies the LT predicate on the "description" field.
func DescriptionLT(v string) predicate.Asset {
	return predicate.Asset(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldDescription), v))
	})
}

// DescriptionLTE applies the LTE predicate on the "description" field.
func DescriptionLTE(v string) predicate.Asset {
	return predicate.Asset(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldDescription), v))
	})
}

// DescriptionContains applies the Contains predicate on the "description" field.
func DescriptionContains(v string) predicate.Asset {
	return predicate.Asset(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldDescription), v))
	})
}

// DescriptionHasPrefix applies the HasPrefix predicate on the "description" field.
func DescriptionHasPrefix(v string) predicate.Asset {
	return predicate.Asset(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldDescription), v))
	})
}

// DescriptionHasSuffix applies the HasSuffix predicate on the "description" field.
func DescriptionHasSuffix(v string) predicate.Asset {
	return predicate.Asset(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldDescription), v))
	})
}

// DescriptionEqualFold applies the EqualFold predicate on the "description" field.
func DescriptionEqualFold(v string) predicate.Asset {
	return predicate.Asset(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldDescription), v))
	})
}

// DescriptionContainsFold applies the ContainsFold predicate on the "description" field.
func DescriptionContainsFold(v string) predicate.Asset {
	return predicate.Asset(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldDescription), v))
	})
}

// ActiveEQ applies the EQ predicate on the "active" field.
func ActiveEQ(v bool) predicate.Asset {
	return predicate.Asset(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldActive), v))
	})
}

// ActiveNEQ applies the NEQ predicate on the "active" field.
func ActiveNEQ(v bool) predicate.Asset {
	return predicate.Asset(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldActive), v))
	})
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.Asset {
	return predicate.Asset(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.Asset {
	return predicate.Asset(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.Asset {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Asset(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldCreatedAt), v...))
	})
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.Asset {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Asset(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldCreatedAt), v...))
	})
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.Asset {
	return predicate.Asset(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.Asset {
	return predicate.Asset(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.Asset {
	return predicate.Asset(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.Asset {
	return predicate.Asset(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCreatedAt), v))
	})
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.Asset {
	return predicate.Asset(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.Asset {
	return predicate.Asset(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.Asset {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Asset(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldUpdatedAt), v...))
	})
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.Asset {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Asset(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldUpdatedAt), v...))
	})
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.Asset {
	return predicate.Asset(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.Asset {
	return predicate.Asset(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.Asset {
	return predicate.Asset(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.Asset {
	return predicate.Asset(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUpdatedAt), v))
	})
}

// TagsEQ applies the EQ predicate on the "tags" field.
func TagsEQ(v string) predicate.Asset {
	return predicate.Asset(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTags), v))
	})
}

// TagsNEQ applies the NEQ predicate on the "tags" field.
func TagsNEQ(v string) predicate.Asset {
	return predicate.Asset(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldTags), v))
	})
}

// TagsIn applies the In predicate on the "tags" field.
func TagsIn(vs ...string) predicate.Asset {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Asset(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldTags), v...))
	})
}

// TagsNotIn applies the NotIn predicate on the "tags" field.
func TagsNotIn(vs ...string) predicate.Asset {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Asset(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldTags), v...))
	})
}

// TagsGT applies the GT predicate on the "tags" field.
func TagsGT(v string) predicate.Asset {
	return predicate.Asset(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldTags), v))
	})
}

// TagsGTE applies the GTE predicate on the "tags" field.
func TagsGTE(v string) predicate.Asset {
	return predicate.Asset(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldTags), v))
	})
}

// TagsLT applies the LT predicate on the "tags" field.
func TagsLT(v string) predicate.Asset {
	return predicate.Asset(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldTags), v))
	})
}

// TagsLTE applies the LTE predicate on the "tags" field.
func TagsLTE(v string) predicate.Asset {
	return predicate.Asset(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldTags), v))
	})
}

// TagsContains applies the Contains predicate on the "tags" field.
func TagsContains(v string) predicate.Asset {
	return predicate.Asset(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldTags), v))
	})
}

// TagsHasPrefix applies the HasPrefix predicate on the "tags" field.
func TagsHasPrefix(v string) predicate.Asset {
	return predicate.Asset(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldTags), v))
	})
}

// TagsHasSuffix applies the HasSuffix predicate on the "tags" field.
func TagsHasSuffix(v string) predicate.Asset {
	return predicate.Asset(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldTags), v))
	})
}

// TagsEqualFold applies the EqualFold predicate on the "tags" field.
func TagsEqualFold(v string) predicate.Asset {
	return predicate.Asset(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldTags), v))
	})
}

// TagsContainsFold applies the ContainsFold predicate on the "tags" field.
func TagsContainsFold(v string) predicate.Asset {
	return predicate.Asset(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldTags), v))
	})
}

// HasSessions applies the HasEdge predicate on the "sessions" edge.
func HasSessions() predicate.Asset {
	return predicate.Asset(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(SessionsTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, SessionsTable, SessionsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasSessionsWith applies the HasEdge predicate on the "sessions" edge with a given conditions (other predicates).
func HasSessionsWith(preds ...predicate.Session) predicate.Asset {
	return predicate.Asset(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(SessionsInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, SessionsTable, SessionsColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Asset) predicate.Asset {
	return predicate.Asset(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Asset) predicate.Asset {
	return predicate.Asset(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Asset) predicate.Asset {
	return predicate.Asset(func(s *sql.Selector) {
		p(s.Not())
	})
}
